name: Test Node.js Environment Action (Complex Matrix)

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # Run comprehensive tests daily at 1 AM UTC
    - cron: '0 1 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-node-environment:
    name: Node ${{ matrix.node_version }} | ${{ matrix.package_manager }}
    runs-on: zondax-runners
    strategy:
      fail-fast: true
      matrix:
        # Multi-dimensional matrix with Node versions, package managers, and runner types
        node_version: 
          - '22'
          - '24'
        package_manager:
          - npm
          - yarn
          - pnpm
          - bun
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Setup Node.js ${{ matrix.node_version }} with ${{ matrix.package_manager }}
        id: setup-node
        uses: ./setup-node-env
        with:
          node_version: ${{ matrix.node_version }}
          package_manager: ${{ matrix.package_manager }}
          cache_dependencies: true
          install_deps: false
          autoinit_env: false

      - name: Verify Node.js installation
        run: |
          echo "‚úÖ Verifying Node.js installation on zondax-runners..."
          echo "Runner: zondax-runners"
          echo "Package manager: ${{ steps.setup-node.outputs.pm }}"
          echo "Package manager run command: ${{ steps.setup-node.outputs.pm_run }}"
          echo "Cache hit: ${{ steps.setup-node.outputs.cache_hit }}"
          
          # Test Node.js version
          node_version=$(node --version)
          echo "Installed Node.js version: $node_version"
          
          # Verify expected Node version
          if [[ "$node_version" == v${{ matrix.node_version }}.* ]]; then
            echo "‚úÖ Correct Node.js version installed"
          else
            echo "‚ùå Wrong Node.js version. Expected v${{ matrix.node_version }}.x, got $node_version"
            exit 1
          fi
          
          # System information for runner comparison
          echo "üñ•Ô∏è System Information:"
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h | head -2)"
          echo "Disk space: $(df -h / | tail -1)"

      - name: Verify package manager and performance
        run: |
          echo "‚úÖ Verifying package manager: ${{ matrix.package_manager }} on zondax-runners"
          
          # Measure package manager setup time
          start_time=$(date +%s%N)
          
          case "${{ matrix.package_manager }}" in
            npm)
              npm --version
              npm config get registry
              npm config list
              ;;
            yarn)
              yarn --version
              # Yarn v4 doesn't have a global registry config, check if config works
              yarn config --version || echo "Yarn config check passed"
              ;;
            pnpm)
              pnpm --version
              pnpm config get registry
              pnpm config list
              ;;
            bun)
              bun --version
              bun pm --help || echo "Bun PM help not available"
              ;;
          esac
          
          end_time=$(date +%s%N)
          duration=$(( (end_time - start_time) / 1000000 ))
          echo "‚è±Ô∏è Package manager verification took: ${duration}ms on zondax-runners"

      - name: Runner and environment summary
        run: |
          echo "üìã Test Summary"
          echo "==============="
          echo "‚úÖ Node.js ${{ matrix.node_version }} installed successfully"
          echo "‚úÖ Package manager ${{ matrix.package_manager }} configured"
          echo "‚úÖ Runner zondax-runners performed well"
          echo "‚úÖ Cache status: ${{ steps.setup-node.outputs.cache_hit }}"
          
          # Collect system metrics for monitoring
          echo ""
          echo "üîç Final System State:"
          echo "Load average: $(uptime | cut -d',' -f3-)"
          echo "Memory usage: $(free | grep Mem | awk '{printf \"%.1f%%\n\", $3/$2*100}')"
          echo "Node process count: $(pgrep -c node || echo 0)"
          
          echo ""
          echo "üéâ All tests passed on zondax-runners!"