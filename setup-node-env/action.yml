name: 'Setup Node.js Environment'
description: 'Setup Node.js with package manager (npm, yarn, pnpm, or bun) and install dependencies'
inputs:
  node_version:
    description: 'Node.js version to install'
    required: false
    default: 'lts/*'
  package_manager:
    description: 'Package manager to use (npm, yarn, pnpm, or bun)'
    required: false
    default: 'npm'
  package_manager_version:
    description: 'Package manager version (for pnpm, yarn, or bun)'
    required: false
    default: 'latest'
  install_deps:
    description: 'Install dependencies after setup'
    required: false
    default: 'true'
  working_directory:
    description: 'Working directory for package operations'
    required: false
    default: '.'
  cache_dependencies:
    description: 'Cache dependencies'
    required: false
    default: 'true'
  autoinit_env:
    description: 'Run env:init:ci script after installing dependencies'
    required: false
    default: 'false'

outputs:
  pm:
    description: 'Package manager command'
    value: ${{ steps.set-pm.outputs.pm }}
  pm_run:
    description: 'Package manager run command'
    value: ${{ steps.set-pm.outputs.pm_run }}
  cache_hit:
    description: 'Whether the cache was hit'
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}
        cache: ${{ inputs.package_manager != 'bun' && inputs.cache_dependencies == 'true' && inputs.package_manager || '' }}
        cache-dependency-path: ${{ inputs.working_directory }}/package-lock.json
    
    - name: Set package manager variables
      id: set-pm
      shell: bash
      run: |
        case "${{ inputs.package_manager }}" in
          bun)
            echo "pm=bun" >> $GITHUB_OUTPUT
            echo "pm_run=bun run" >> $GITHUB_OUTPUT
            ;;
          yarn)
            echo "pm=yarn" >> $GITHUB_OUTPUT
            echo "pm_run=yarn run" >> $GITHUB_OUTPUT
            ;;
          pnpm)
            echo "pm=pnpm" >> $GITHUB_OUTPUT
            echo "pm_run=pnpm run" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "pm=npm" >> $GITHUB_OUTPUT
            echo "pm_run=npm run" >> $GITHUB_OUTPUT
            ;;
        esac
    
    - name: Setup Bun
      if: inputs.package_manager == 'bun'
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ inputs.package_manager_version }}
    
    - name: Setup pnpm
      if: inputs.package_manager == 'pnpm'
      uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.package_manager_version }}
    
    - name: Setup Yarn
      if: inputs.package_manager == 'yarn'
      shell: bash
      run: |
        if [ "${{ inputs.package_manager_version }}" != "latest" ]; then
          npm install -g yarn@${{ inputs.package_manager_version }}
        else
          npm install -g yarn
        fi
    
    - name: Cache Bun dependencies
      if: inputs.package_manager == 'bun' && inputs.cache_dependencies == 'true'
      id: cache-bun
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles(format('{0}/bun.lockb', inputs.working_directory)) }}
        restore-keys: |
          ${{ runner.os }}-bun-
    
    - name: Install dependencies
      if: inputs.install_deps == 'true'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        ${{ steps.set-pm.outputs.pm }} install
    
    - name: Initialize environment
      if: inputs.autoinit_env == 'true'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        ${{ steps.set-pm.outputs.pm_run }} env:init:ci